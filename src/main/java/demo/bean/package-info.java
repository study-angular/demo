/**
 -PO(persistant object) 持久对象
 在o/r映射的时候出现的概念，如果没有o/r映射，没有这个概念存在了。通常对应数据模型(数据库),本身还有部分业务逻辑的处理。可以看成是与数据库中的表相映射的java对象。最简单的PO就是对应数据库中某个表中的一条记录，多个记录可以用PO的集合。PO中应该不包含任何对数据库的操作。

 -VO(value object) 值对象
 通常用于业务层之间的数据传递，和PO一样也是仅仅包含数据而已。但应是抽象出的业务对象,可以和表对应,也可以不,这根据业务的需要.个人觉得同DTO(数据传输对象),在web上传递。

 -TO(Transfer Object)，数据传输对象
 在应用程序不同tie(关系)之间传输的对象

 -BO(business object) 业务对象
 从业务模型的角度看,见UML元件领域模型中的领域对象。封装业务逻辑的java对象,通过调用DAO方法,结合PO,VO进行业务操作。

 总结一句：
    po包中放数据库映射对象，与Mapper对应起来。也就是从db中取出来的应该是po
        数据库  -[jdbc]->  dao  -[po]->  service
    vo包中放与界面对应的数据对象，也就是说界面需要什么，就可以定义怎样的vo
        controller  -[vo]->  ajax(client:json)
    to包中主要存放传输对象，主要用于远程调用时的大量传输对象，如果是界面显示则成为vo

    bo包中主要存放业务对象，是计算过程中使用的业务对象
        service  <-->  [bo]
 ------
 再分析下dao、service、controller三层作用
    dao层
        从数据源获取数据，
            1.一般来说都是从数据库直接获取表中的一条/批记录，这就是po对象。
            2.部分数据获取不需要大量原始数据，而只需要数据表中的部分字段。这种情况下，建议使用po对象。
            3.部分数据获取不需要数据表中的一批记录，而需要一个聚集结果。这种情况下，建议使用po对象。
            4.还有些数据获取需要多个数据表进行关联，也就是从数据库直接获取一个bo对象，此时建议使用bo对象。
    service层
        从dao层获取到数据，一般来说是po对象，并对该对象进行复杂业务处理
            1.处理过程中使用的新的对象建议使用bo对象
            2.处理过程中返回到controller层的对象建议使用vo对象
            3.如果service层需要跟其他业务系统进行数据交换建议使用to对象
    controller层
        将service层取得的数据，一般来说是vo或bo对象，将该对象通过http请求（ajax）返回给client（浏览器端）

 *
 */
package demo.bean;